// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hotel.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto.Hotel {

  /// <summary>Holder for reflection information generated from hotel.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class HotelReflection {

    #region Descriptor
    /// <summary>File descriptor for hotel.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HotelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgtob3RlbC5wcm90bxILcHJvdG8uaG90ZWwiSwoEUm9vbRIKCgJpZBgBIAEo",
            "BRIPCgdpbnZDb2RlGAIgASgJEhAKCHJhY2tSYXRlGAMgASgJEhQKDGhpZGVS",
            "YWNrUmF0ZRgEIAEoCCKkAQoFSG90ZWwSCgoCaWQYASABKAkSEQoJaG90ZWxD",
            "b2RlGAIgASgJEhMKC2hvdGVsU3RhdHVzGAMgASgJEhUKDWhvdGVsQ3VycmVu",
            "Y3kYBCABKAkSGAoQbWludXRlc09mZnNldFV0YxgFIAEoBRIUCgxwcm92aWRl",
            "ck5hbWUYBiABKAkSIAoFcm9vbXMYByADKAsyES5wcm90by5ob3RlbC5Sb29t",
            "Ij8KGUhvdGVsRGV0YWlsc1Jlc3BvbnNlTW9kZWwSIgoGaG90ZWxzGAEgAygL",
            "MhIucHJvdG8uaG90ZWwuSG90ZWxiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::Proto.Hotel.Room), global::Proto.Hotel.Room.Parser, new[]{ "Id", "InvCode", "RackRate", "HideRackRate" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Proto.Hotel.Hotel), global::Proto.Hotel.Hotel.Parser, new[]{ "Id", "HotelCode", "HotelStatus", "HotelCurrency", "MinutesOffsetUtc", "ProviderName", "Rooms" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Proto.Hotel.HotelDetailsResponseModel), global::Proto.Hotel.HotelDetailsResponseModel.Parser, new[]{ "Hotels" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Room : pb::IMessage<Room> {
    private static readonly pb::MessageParser<Room> _parser = new pb::MessageParser<Room>(() => new Room());
    public static pb::MessageParser<Room> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Hotel.HotelReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Room() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Room(Room other) : this() {
      id_ = other.id_;
      invCode_ = other.invCode_;
      rackRate_ = other.rackRate_;
      hideRackRate_ = other.hideRackRate_;
    }

    public Room Clone() {
      return new Room(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "invCode" field.</summary>
    public const int InvCodeFieldNumber = 2;
    private string invCode_ = "";
    public string InvCode {
      get { return invCode_; }
      set {
        invCode_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rackRate" field.</summary>
    public const int RackRateFieldNumber = 3;
    private string rackRate_ = "";
    public string RackRate {
      get { return rackRate_; }
      set {
        rackRate_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hideRackRate" field.</summary>
    public const int HideRackRateFieldNumber = 4;
    private bool hideRackRate_;
    public bool HideRackRate {
      get { return hideRackRate_; }
      set {
        hideRackRate_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Room);
    }

    public bool Equals(Room other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (InvCode != other.InvCode) return false;
      if (RackRate != other.RackRate) return false;
      if (HideRackRate != other.HideRackRate) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (InvCode.Length != 0) hash ^= InvCode.GetHashCode();
      if (RackRate.Length != 0) hash ^= RackRate.GetHashCode();
      if (HideRackRate != false) hash ^= HideRackRate.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (InvCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InvCode);
      }
      if (RackRate.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RackRate);
      }
      if (HideRackRate != false) {
        output.WriteRawTag(32);
        output.WriteBool(HideRackRate);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (InvCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InvCode);
      }
      if (RackRate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RackRate);
      }
      if (HideRackRate != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(Room other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.InvCode.Length != 0) {
        InvCode = other.InvCode;
      }
      if (other.RackRate.Length != 0) {
        RackRate = other.RackRate;
      }
      if (other.HideRackRate != false) {
        HideRackRate = other.HideRackRate;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            InvCode = input.ReadString();
            break;
          }
          case 26: {
            RackRate = input.ReadString();
            break;
          }
          case 32: {
            HideRackRate = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Hotel : pb::IMessage<Hotel> {
    private static readonly pb::MessageParser<Hotel> _parser = new pb::MessageParser<Hotel>(() => new Hotel());
    public static pb::MessageParser<Hotel> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Hotel.HotelReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Hotel() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Hotel(Hotel other) : this() {
      id_ = other.id_;
      hotelCode_ = other.hotelCode_;
      hotelStatus_ = other.hotelStatus_;
      hotelCurrency_ = other.hotelCurrency_;
      minutesOffsetUtc_ = other.minutesOffsetUtc_;
      providerName_ = other.providerName_;
      rooms_ = other.rooms_.Clone();
    }

    public Hotel Clone() {
      return new Hotel(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    public string Id {
      get { return id_; }
      set {
        id_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hotelCode" field.</summary>
    public const int HotelCodeFieldNumber = 2;
    private string hotelCode_ = "";
    public string HotelCode {
      get { return hotelCode_; }
      set {
        hotelCode_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hotelStatus" field.</summary>
    public const int HotelStatusFieldNumber = 3;
    private string hotelStatus_ = "";
    public string HotelStatus {
      get { return hotelStatus_; }
      set {
        hotelStatus_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hotelCurrency" field.</summary>
    public const int HotelCurrencyFieldNumber = 4;
    private string hotelCurrency_ = "";
    public string HotelCurrency {
      get { return hotelCurrency_; }
      set {
        hotelCurrency_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "minutesOffsetUtc" field.</summary>
    public const int MinutesOffsetUtcFieldNumber = 5;
    private int minutesOffsetUtc_;
    public int MinutesOffsetUtc {
      get { return minutesOffsetUtc_; }
      set {
        minutesOffsetUtc_ = value;
      }
    }

    /// <summary>Field number for the "providerName" field.</summary>
    public const int ProviderNameFieldNumber = 6;
    private string providerName_ = "";
    public string ProviderName {
      get { return providerName_; }
      set {
        providerName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rooms" field.</summary>
    public const int RoomsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Proto.Hotel.Room> _repeated_rooms_codec
        = pb::FieldCodec.ForMessage(58, global::Proto.Hotel.Room.Parser);
    private readonly pbc::RepeatedField<global::Proto.Hotel.Room> rooms_ = new pbc::RepeatedField<global::Proto.Hotel.Room>();
    public pbc::RepeatedField<global::Proto.Hotel.Room> Rooms {
      get { return rooms_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Hotel);
    }

    public bool Equals(Hotel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (HotelCode != other.HotelCode) return false;
      if (HotelStatus != other.HotelStatus) return false;
      if (HotelCurrency != other.HotelCurrency) return false;
      if (MinutesOffsetUtc != other.MinutesOffsetUtc) return false;
      if (ProviderName != other.ProviderName) return false;
      if(!rooms_.Equals(other.rooms_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (HotelCode.Length != 0) hash ^= HotelCode.GetHashCode();
      if (HotelStatus.Length != 0) hash ^= HotelStatus.GetHashCode();
      if (HotelCurrency.Length != 0) hash ^= HotelCurrency.GetHashCode();
      if (MinutesOffsetUtc != 0) hash ^= MinutesOffsetUtc.GetHashCode();
      if (ProviderName.Length != 0) hash ^= ProviderName.GetHashCode();
      hash ^= rooms_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HotelCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HotelCode);
      }
      if (HotelStatus.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(HotelStatus);
      }
      if (HotelCurrency.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(HotelCurrency);
      }
      if (MinutesOffsetUtc != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MinutesOffsetUtc);
      }
      if (ProviderName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ProviderName);
      }
      rooms_.WriteTo(output, _repeated_rooms_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HotelCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HotelCode);
      }
      if (HotelStatus.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HotelStatus);
      }
      if (HotelCurrency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HotelCurrency);
      }
      if (MinutesOffsetUtc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinutesOffsetUtc);
      }
      if (ProviderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProviderName);
      }
      size += rooms_.CalculateSize(_repeated_rooms_codec);
      return size;
    }

    public void MergeFrom(Hotel other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.HotelCode.Length != 0) {
        HotelCode = other.HotelCode;
      }
      if (other.HotelStatus.Length != 0) {
        HotelStatus = other.HotelStatus;
      }
      if (other.HotelCurrency.Length != 0) {
        HotelCurrency = other.HotelCurrency;
      }
      if (other.MinutesOffsetUtc != 0) {
        MinutesOffsetUtc = other.MinutesOffsetUtc;
      }
      if (other.ProviderName.Length != 0) {
        ProviderName = other.ProviderName;
      }
      rooms_.Add(other.rooms_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            HotelCode = input.ReadString();
            break;
          }
          case 26: {
            HotelStatus = input.ReadString();
            break;
          }
          case 34: {
            HotelCurrency = input.ReadString();
            break;
          }
          case 40: {
            MinutesOffsetUtc = input.ReadInt32();
            break;
          }
          case 50: {
            ProviderName = input.ReadString();
            break;
          }
          case 58: {
            rooms_.AddEntriesFrom(input, _repeated_rooms_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class HotelDetailsResponseModel : pb::IMessage<HotelDetailsResponseModel> {
    private static readonly pb::MessageParser<HotelDetailsResponseModel> _parser = new pb::MessageParser<HotelDetailsResponseModel>(() => new HotelDetailsResponseModel());
    public static pb::MessageParser<HotelDetailsResponseModel> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.Hotel.HotelReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public HotelDetailsResponseModel() {
      OnConstruction();
    }

    partial void OnConstruction();

    public HotelDetailsResponseModel(HotelDetailsResponseModel other) : this() {
      hotels_ = other.hotels_.Clone();
    }

    public HotelDetailsResponseModel Clone() {
      return new HotelDetailsResponseModel(this);
    }

    /// <summary>Field number for the "hotels" field.</summary>
    public const int HotelsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.Hotel.Hotel> _repeated_hotels_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.Hotel.Hotel.Parser);
    private readonly pbc::RepeatedField<global::Proto.Hotel.Hotel> hotels_ = new pbc::RepeatedField<global::Proto.Hotel.Hotel>();
    public pbc::RepeatedField<global::Proto.Hotel.Hotel> Hotels {
      get { return hotels_; }
    }

    public override bool Equals(object other) {
      return Equals(other as HotelDetailsResponseModel);
    }

    public bool Equals(HotelDetailsResponseModel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!hotels_.Equals(other.hotels_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= hotels_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      hotels_.WriteTo(output, _repeated_hotels_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += hotels_.CalculateSize(_repeated_hotels_codec);
      return size;
    }

    public void MergeFrom(HotelDetailsResponseModel other) {
      if (other == null) {
        return;
      }
      hotels_.Add(other.hotels_);
    }

    public void Add(Hotel hotel) {
        if (hotel == null) {
            return;
        }
        hotels_.Add(hotel);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            hotels_.AddEntriesFrom(input, _repeated_hotels_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
